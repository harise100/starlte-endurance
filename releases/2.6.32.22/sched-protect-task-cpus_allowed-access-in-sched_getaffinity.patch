From tglx@linutronix.de  Thu Sep 16 14:00:26 2010
Message-Id: <8a8f42c974ba851cdca56d2243ed403812e6e994.1283514306.git.efault@gmx.de>
From: Thomas Gleixner <tglx@linutronix.de>
Date: Tue, 8 Dec 2009 20:24:16 +0000
Subject: sched: Protect task->cpus_allowed access in sched_getaffinity()
To: stable <stable@kernel.org>
Cc: Ingo Molnar <mingo@elte.hu>,
	Peter Zijlstra <a.p.zijlstra@chello.nl>, Greg KH <greg@kroah.com>


From: Thomas Gleixner <tglx@linutronix.de>

commit 3160568371da441b7f2fb57f2f1225404207e8f2 upstream

sched_getaffinity() is not protected against a concurrent
modification of the tasks affinity.

Serialize the access with task_rq_lock(task).

Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
Acked-by: Peter Zijlstra <peterz@infradead.org>
LKML-Reference: <20091208202026.769251187@linutronix.de>
Signed-off-by: Ingo Molnar <mingo@elte.hu>
Signed-off-by: Mike Galbraith <efault@gmx.de>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
---
 kernel/sched.c |    4 ++++
 1 file changed, 4 insertions(+)

--- a/kernel/sched.c
+++ b/kernel/sched.c
@@ -6686,6 +6686,8 @@ SYSCALL_DEFINE3(sched_setaffinity, pid_t
 long sched_getaffinity(pid_t pid, struct cpumask *mask)
 {
 	struct task_struct *p;
+	unsigned long flags;
+	struct rq *rq;
 	int retval;
 
 	get_online_cpus();
@@ -6700,7 +6702,9 @@ long sched_getaffinity(pid_t pid, struct
 	if (retval)
 		goto out_unlock;
 
+	rq = task_rq_lock(p, &flags);
 	cpumask_and(mask, &p->cpus_allowed, cpu_online_mask);
+	task_rq_unlock(rq, &flags);
 
 out_unlock:
 	read_unlock(&tasklist_lock);
