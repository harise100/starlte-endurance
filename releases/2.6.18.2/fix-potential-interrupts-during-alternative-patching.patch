From stable-bounces@linux.kernel.org Fri Oct 20 14:19:30 2006
Message-ID: <45393D3B.1040904@vmware.com>
Date: Fri, 20 Oct 2006 14:18:51 -0700
From: Zachary Amsden <zach@vmware.com>
MIME-Version: 1.0
To: stable@kernel.org
Subject: Fix potential interrupts during alternative patching

From: Zachary Amsden <zach@vmware.com>

Interrupts must be disabled during alternative instruction patching.
On systems with high timer IRQ rates, or when running in an emulator,
timing differences can result in random kernel panics because of
running partially patched instructions.  This doesn't yet fix NMIs,
which requires extricating the patch code from the late bug checking
and is logically separate (and also less likely to cause problems).

Signed-off-by: Zachary Amsden <zach@vmware.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
Signed-off-by: Chris Wright <chrisw@sous-sol.org>

---
 arch/i386/kernel/alternative.c |    4 ++++
 1 file changed, 4 insertions(+)

--- linux-2.6.18.1.orig/arch/i386/kernel/alternative.c
+++ linux-2.6.18.1/arch/i386/kernel/alternative.c
@@ -344,6 +344,7 @@ void alternatives_smp_switch(int smp)
 
 void __init alternative_instructions(void)
 {
+	unsigned long flags;
 	if (no_replacement) {
 		printk(KERN_INFO "(SMP-)alternatives turned off\n");
 		free_init_pages("SMP alternatives",
@@ -351,6 +352,8 @@ void __init alternative_instructions(voi
 				(unsigned long)__smp_alt_end);
 		return;
 	}
+
+	local_irq_save(flags);
 	apply_alternatives(__alt_instructions, __alt_instructions_end);
 
 	/* switch to patch-once-at-boottime-only mode and free the
@@ -386,4 +389,5 @@ void __init alternative_instructions(voi
 		alternatives_smp_switch(0);
 	}
 #endif
+	local_irq_restore(flags);
 }
