From stable-bounces@linux.kernel.org  Mon Nov  6 09:01:05 2006
From: Auke Kok <auke-jan.h.kok@intel.com>
To: jeff@garzik.org, torvalds@osdl.org, stable@kernel.org
Message-Id: <20061106165712.BAA253FFEA@ahkok-mobl.jf.intel.com>
Date: Mon,  6 Nov 2006 08:57:12 -0800 (PST)
Cc: akpm@osdl.org, auke-jan.h.kok@intel.com, nhorman@redhat.com, cluebot@fedorafaq.org, laurent.riffard@free.fr, toralf.foerster@gmx.de, bruce.w.allan@intel.com, jesse.brandeburg@intel.com, rajesh.shah@intel.com, rjw@sisk.pl, e1000-list <e1000-devel@lists.sourceforge.net>, john.ronciak@intel.com, pavel@ucw.cz, davej@redhat.com, notting@redhat.com, bunk@stusta.de, "John W. Linville" <linville@tuxdriver.com>
Subject: e1000: Fix regression: garbled stats and irq allocation during swsusp

e1000: Fix suspend/resume powerup and irq allocation

From: Auke Kok <auke-jan.h.kok@intel.com>

After 7.0.33/2.6.16, e1000 suspend/resume left the user with an enabled
device showing garbled statistics and undetermined irq allocation state,
where `ifconfig eth0 down` would display `trying to free already freed irq`.

Explicitly free and allocate irq as well as powerup the PHY during resume
fixes when needed.

Signed-off-by: Auke Kok <auke-jan.h.kok@intel.com>
[chrisw: trivial 2.6.18 backport s/err/ret_val/]
Signed-off-by: Chris Wright <chrisw@sous-sol.org>
---

 drivers/net/e1000/e1000_main.c |    7 +++++++
 1 file changed, 7 insertions(+)

--- linux-2.6.18.2.orig/drivers/net/e1000/e1000_main.c
+++ linux-2.6.18.2/drivers/net/e1000/e1000_main.c
@@ -4683,6 +4683,9 @@ e1000_suspend(struct pci_dev *pdev, pm_m
 	if (adapter->hw.phy_type == e1000_phy_igp_3)
 		e1000_phy_powerdown_workaround(&adapter->hw);
 
+	if (netif_running(netdev))
+		e1000_free_irq(adapter);
+
 	/* Release control of h/w to f/w.  If f/w is AMT enabled, this
 	 * would have already happened in close and is redundant. */
 	e1000_release_hw_control(adapter);
@@ -4710,6 +4713,10 @@ e1000_resume(struct pci_dev *pdev)
 	pci_enable_wake(pdev, PCI_D3hot, 0);
 	pci_enable_wake(pdev, PCI_D3cold, 0);
 
+	if (netif_running(netdev) && (ret_val = e1000_request_irq(adapter)))
+		return ret_val;
+
+	e1000_power_up_phy(adapter);
 	e1000_reset(adapter);
 	E1000_WRITE_REG(&adapter->hw, WUS, ~0);
 
