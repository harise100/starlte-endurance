From tglx@linutronix.de Wed Feb 21 16:28:30 2007
From: Thomas Gleixner <tglx@linutronix.de>
Date: Thu, 22 Feb 2007 01:33:29 +0100
Subject: Fix posix-cpu-timer breakage caused by stale p->last_ran value
To: Andrew Morton <akpm@linux-foundation.org>
Cc: Ingo Molnar <mingo@elte.hu>, john stultz <johnstul@us.ibm.com>, Roman Zippel <zippel@linux-m68k.org>, Mike Galbraith <efault@gmx.de>, Ken Chen <kenneth.w.chen@intel.com>, balducci@units.it, Greg KH <greg@kroah.com>
Message-ID: <1172104409.25076.165.camel@localhost.localdomain>

From: Thomas Gleixner <tglx@linutronix.de>

Problem description at:
http://bugzilla.kernel.org/show_bug.cgi?id=8048

Commit b18ec80396834497933d77b81ec0918519f4e2a7 
    [PATCH] sched: improve migration accuracy
optimized the scheduler time calculations, but broke posix-cpu-timers.

The problem is that the p->last_ran value is not updated after a context
switch. So a subsequent call to current_sched_time() calculates with a
stale p->last_ran value, i.e. accounts the full time, which the task was
scheduled away.

Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
Acked-by: Ingo Molnar <mingo@elte.hu>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

---
 kernel/sched.c |    2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

--- linux-2.6.20.1.orig/kernel/sched.c
+++ linux-2.6.20.1/kernel/sched.c
@@ -3547,7 +3547,7 @@ switch_tasks:
 
 	sched_info_switch(prev, next);
 	if (likely(prev != next)) {
-		next->timestamp = now;
+		next->timestamp = next->last_ran = now;
 		rq->nr_switches++;
 		rq->curr = next;
 		++*switch_count;
